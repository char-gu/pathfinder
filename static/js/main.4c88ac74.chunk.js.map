{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","Algos/dijkstra.js","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Node","this","props","row","col","startNode","finishNode","isBlocked","onMouseDown","onMouseEnter","onMouseUp","extraClassName","id","className","Component","dijkstra","grid","visitedOrdered","distance","unvisitedNodes","nodes","node","push","getNodes","length","sortNodesByDistance","nearestNode","shift","Infinity","isVisited","updateNeighbors","sort","nodeA","nodeB","neighbors","filter","neighbor","getNeighbors","prev","PathfindingVisualizer","state","mousePressed","createGrid","setState","newGrid","getGridWithWalls","shortestPath","i","setTimeout","animateFinalPath","document","getElementById","curr","unshift","getShortestPath","animateAlgo","onClick","visualizeAlgo","resetBoard","map","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","slice","newNode","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.4c88ac74.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './Node.css';\n\nexport default class Node extends Component {\n    render() {\n        const {\n          row,\n          col,\n          startNode,\n          finishNode,\n          isBlocked,\n          onMouseDown,\n          onMouseEnter,\n          onMouseUp,\n        } = this.props;\n        \n        const extraClassName = finishNode\n          ? 'finish-node'\n          : startNode\n          ? 'start-node'\n          : isBlocked\n          ? 'blocked-node'\n          : '';\n    \n        return (\n          <div\n            id={`node-${row}-${col}`}\n            className={`node ${extraClassName}`}\n            onMouseDown={() => onMouseDown(row, col)}\n            onMouseEnter={() => onMouseEnter(row, col)}\n            onMouseUp={() => onMouseUp()}></div>\n        );\n      }\n    }","export function dijkstra(grid, startNode, finishNode) { \n    const visitedOrdered = [];\n\n    if (!startNode || !finishNode || startNode === finishNode) {\n        return false;\n    }\n\n    startNode.distance = 0;\n    const unvisitedNodes = getNodes(grid);\n\n    while (unvisitedNodes.length !== 0) {\n        sortNodesByDistance(unvisitedNodes);\n        const nearestNode = unvisitedNodes.shift();\n        \n        if (nearestNode.isBlocked) continue;\n        if (nearestNode.distance === Infinity) return visitedOrdered;\n\n        nearestNode.isVisited = true;\n        visitedOrdered.push(nearestNode);\n\n        if (nearestNode === finishNode) return visitedOrdered;\n        updateNeighbors(nearestNode, grid);\n    }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateNeighbors(node, grid) {\n    const neighbors = getNeighbors(node, grid);\n    for (const neighbor of neighbors) {\n        neighbor.distance = node.distance + 1;\n        neighbor.prev = node;\n    }\n}\n\nfunction getNeighbors(node, grid) {\n    const neighbors = [];\n    const {col, row} = node;\n    if (row > 0) neighbors.push(grid[row-1][col]);\n    if (row < grid.length-1) neighbors.push(grid[row+1][col]);\n    if (col > 0) neighbors.push(grid[row][col-1]);\n    if (col < grid[0].length-1) neighbors.push(grid[row][col+1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n        for (const node of row) {\n            nodes.push(node);\n        }\n    }\n    return nodes;\n}\n\nexport function getShortestPath(finishNode) {\n    const shortestPath = [];\n    let curr = finishNode;\n    while (curr !== null) {\n        shortestPath.unshift(curr);\n        curr = curr.prev;\n    }\n    return shortestPath;\n}\n","import React, {Component} from 'react';\nimport Node from './Node/Node'\nimport './PathfindingVisualizer.css';\nimport {dijkstra, getShortestPath} from '../Algos/dijkstra';\n\nconst START_X = 11;\nconst START_Y = 10;\nconst FINISH_X = 11;\nconst FINISH_Y = 40;\n\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n      super();\n      this.state = {\n          grid: [],\n          mousePressed: false,\n      };\n  }\n\n  componentDidMount() {\n      const grid = createGrid();\n      this.setState({grid});\n  }\n\n  handleMouseUp(row, col) {\n    this.setState({mousePressed: false});\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getGridWithWalls(this.state.grid, row, col);\n    this.setState({grid: newGrid, mousePressed: true});\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mousePressed) return;\n\n    const newGrid = getGridWithWalls(this.state.grid, row, col);\n    this.setState({grid: newGrid});\n  }\n\n  animateAlgo(visitedOrdered, shortestPath) {\n    for (let i = 0; i <= visitedOrdered.length; i++) {\n      if (i === visitedOrdered.length) {\n        setTimeout(() => {\n          this.animateFinalPath(shortestPath);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedOrdered[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node visited-node';\n      }, 10 * i);\n    }\n  }\n\n  animateFinalPath(shortestPath) {\n    for (let i = 0; i < shortestPath.length; i++) {\n      setTimeout(() => {\n        const node = shortestPath[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node final-path';\n      }, 50 * i);\n    }\n  }\n\n  visualizeAlgo() {\n    const {grid} = this.state;\n    const startNode = grid[START_X][START_Y];\n    const finishNode = grid[FINISH_X][FINISH_Y];\n    const visitedOrdered = dijkstra(grid, startNode, finishNode);\n    const shortestPath = getShortestPath(finishNode);\n    this.animateAlgo(visitedOrdered, shortestPath);\n  }\n\n  resetBoard() {\n    const grid = createGrid();\n    this.setState(grid);\n  }\n\n  render() {\n      const {grid, mousePressed} = this.state;\n\n      return (\n        <>\n          <button onClick={() => this.visualizeAlgo()}>\n            Visualize\n          </button>\n          <button onClick={() => this.resetBoard()}>\n            Reset\n          </button>\n          <div className=\"grid\">\n            {grid.map((row, rowIdx) => {\n              return (\n                <div key={rowIdx}>\n                  {row.map((node, nodeIdx) => {\n                    const {row, col, startNode, finishNode, isBlocked} = node;\n                    return (\n                      <Node\n                        key={nodeIdx}\n                        row={row}\n                        col={col}\n                        startNode={startNode}\n                        finishNode={finishNode}\n                        isBlocked={isBlocked}\n                        mousePressed={mousePressed}\n                        onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                        onMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\n                        onMouseUp={() => this.handleMouseUp()}></Node>\n                    );\n                  })}\n              </div>\n              );\n            })}\n          </div>\n        </>\n      );\n  }\n}\n\nconst createGrid = () => {\n  const grid = [];\n\n  for (let row = 0; row < 25; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(row, col));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createNode = (row, col) => {\n  return {\n    row,\n    col,\n    startNode: row === START_X && col === START_Y,\n    finishNode: row === FINISH_X && col === FINISH_Y,\n    distance: Infinity,\n    isVisited: false,\n    isBlocked: false,\n    prev: null,\n  };\n};\n\nconst getGridWithWalls = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isBlocked: !node.isBlocked,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};","import React from 'react';\nimport './App.css';\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}